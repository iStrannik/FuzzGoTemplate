start = template;
template = (Text | GoAction) (Text | GoAction)*;
GoAction = CommentAction | PipelineAction | IfAction | RangeAction | TemplateAction | BlockAction | WithAction | defineAction ;
defineAction = LD Define StringConstant RD ;
CommentAction = LD CommentBegin AnyText CommentEnd RD ;
PipelineAction = LD ( Pipeline | VarDeclarePipeline | VarAssignPipeline ) RD ;
IfAction = LD If Pipeline RD template ( LD Else (If Pipeline)? RD template )? End ;
RangeAction = LD Range ( Pipeline | VarDeclarePipeline ) RD template ( LD Else RD template)? End ;
TemplateAction = LD Template Name (Pipeline)? RD ;
BlockAction = LD Block Name (Pipeline)? RD ;
WithAction = LD With Pipeline RD template ( LD Else RD template)? End ;
Pipeline = argument ( Pipe argument )* | MethodCall | FuncCall ;
VarDeclarePipeline =  Variable (Comma Variable)? Assignment Pipeline ;
VarAssignPipeline =  Variable Equal Pipeline ;
argument = Constant | Nil | Variable | Fields | FuncCall | (LeftParenthesis argument RightParenthesis Fields? ) ;
Variable = Dollar (Name)? ;
Fields = (Variable)? Dot Name ( Dot Name)? ;
FuncCall =  globalFunctions;
globalFunctions = (And argument argument) | Index argument (argument)* | Slice argument (argument)* | Len argument | Not argument | Or argument argument | Printf argument (argument)* | Eq argument argument | Ne argument argument | Lt argument argument | Le argument argument | Gt argument argument| Ge argument argument | local (argument)* ;
local = Name;
MethodCall = ( Variable | Fields ) ( argument )* ;
End = LD end RD ;
LD = BlockStart (Dash)? ;
RD = (Dash)?  BlockEnd ;
Text = "TEXT";
Template = "template";
Block = "block";
With = "with";
CommentBegin = "/*";
CommentEnd = "*/";
If = "if";
Else = "else";
Range = "range";
Pipe = "|";
Comma = ",";
Assignment = ":=";
Equal = "=";
Nil = "nil";
LeftParenthesis = "(";
RightParenthesis = ")";
Dollar = "$";
Dot = ".";
end = "end";
BlockStart = "{{";
Dash = "-";
BlockEnd = "}}";
Constant = "CONSTANT";
Define = "define";
And = "and";
Eq = "eq";
Lt = "lt";
Le = "le";
Ne = "ne";
Gt = "gt";
Ge = "ge";
Len = "len";
Not = "not";
Or = "or";
Index = "index";
Slice = "slice";
Printf = "printf";
AnyText = "Comment";
Name = /[a-zA-Z]{1}[a-zA-Z0-9_]*/ ;
StringConstant = "\"" AnyString "\"" ;
AnyString = /[a-zA-Z]{1}[a-zA-Z0-9_]*/ ;