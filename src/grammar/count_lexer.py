# Generated from count_lexer.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,419,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
        1,52,1,52,5,52,390,8,52,10,52,12,52,393,9,52,1,52,1,52,1,53,1,53,
        1,53,5,53,400,8,53,10,53,12,53,403,9,53,1,54,1,54,1,54,5,54,408,
        8,54,10,54,12,54,411,9,54,1,55,4,55,414,8,55,11,55,12,55,415,1,55,
        1,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,55,111,56,1,0,6,6,0,32,32,45,57,65,90,92,92,95,95,97,122,1,0,
        48,57,2,0,46,46,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,422,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,3,118,
        1,0,0,0,5,127,1,0,0,0,7,133,1,0,0,0,9,138,1,0,0,0,11,141,1,0,0,0,
        13,144,1,0,0,0,15,147,1,0,0,0,17,152,1,0,0,0,19,158,1,0,0,0,21,160,
        1,0,0,0,23,162,1,0,0,0,25,165,1,0,0,0,27,167,1,0,0,0,29,171,1,0,
        0,0,31,173,1,0,0,0,33,175,1,0,0,0,35,177,1,0,0,0,37,179,1,0,0,0,
        39,183,1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,191,1,0,0,0,47,200,
        1,0,0,0,49,207,1,0,0,0,51,211,1,0,0,0,53,214,1,0,0,0,55,217,1,0,
        0,0,57,220,1,0,0,0,59,223,1,0,0,0,61,226,1,0,0,0,63,229,1,0,0,0,
        65,233,1,0,0,0,67,237,1,0,0,0,69,240,1,0,0,0,71,246,1,0,0,0,73,252,
        1,0,0,0,75,259,1,0,0,0,77,265,1,0,0,0,79,279,1,0,0,0,81,287,1,0,
        0,0,83,300,1,0,0,0,85,310,1,0,0,0,87,320,1,0,0,0,89,329,1,0,0,0,
        91,339,1,0,0,0,93,347,1,0,0,0,95,356,1,0,0,0,97,361,1,0,0,0,99,367,
        1,0,0,0,101,380,1,0,0,0,103,385,1,0,0,0,105,387,1,0,0,0,107,396,
        1,0,0,0,109,404,1,0,0,0,111,413,1,0,0,0,113,114,5,84,0,0,114,115,
        5,69,0,0,115,116,5,88,0,0,116,117,5,84,0,0,117,2,1,0,0,0,118,119,
        5,116,0,0,119,120,5,101,0,0,120,121,5,109,0,0,121,122,5,112,0,0,
        122,123,5,108,0,0,123,124,5,97,0,0,124,125,5,116,0,0,125,126,5,101,
        0,0,126,4,1,0,0,0,127,128,5,98,0,0,128,129,5,108,0,0,129,130,5,111,
        0,0,130,131,5,99,0,0,131,132,5,107,0,0,132,6,1,0,0,0,133,134,5,119,
        0,0,134,135,5,105,0,0,135,136,5,116,0,0,136,137,5,104,0,0,137,8,
        1,0,0,0,138,139,5,47,0,0,139,140,5,42,0,0,140,10,1,0,0,0,141,142,
        5,42,0,0,142,143,5,47,0,0,143,12,1,0,0,0,144,145,5,105,0,0,145,146,
        5,102,0,0,146,14,1,0,0,0,147,148,5,101,0,0,148,149,5,108,0,0,149,
        150,5,115,0,0,150,151,5,101,0,0,151,16,1,0,0,0,152,153,5,114,0,0,
        153,154,5,97,0,0,154,155,5,110,0,0,155,156,5,103,0,0,156,157,5,101,
        0,0,157,18,1,0,0,0,158,159,5,124,0,0,159,20,1,0,0,0,160,161,5,44,
        0,0,161,22,1,0,0,0,162,163,5,58,0,0,163,164,5,61,0,0,164,24,1,0,
        0,0,165,166,5,61,0,0,166,26,1,0,0,0,167,168,5,110,0,0,168,169,5,
        105,0,0,169,170,5,108,0,0,170,28,1,0,0,0,171,172,5,40,0,0,172,30,
        1,0,0,0,173,174,5,41,0,0,174,32,1,0,0,0,175,176,5,36,0,0,176,34,
        1,0,0,0,177,178,5,46,0,0,178,36,1,0,0,0,179,180,5,101,0,0,180,181,
        5,110,0,0,181,182,5,100,0,0,182,38,1,0,0,0,183,184,5,123,0,0,184,
        185,5,123,0,0,185,40,1,0,0,0,186,187,5,45,0,0,187,42,1,0,0,0,188,
        189,5,125,0,0,189,190,5,125,0,0,190,44,1,0,0,0,191,192,5,67,0,0,
        192,193,5,79,0,0,193,194,5,78,0,0,194,195,5,83,0,0,195,196,5,84,
        0,0,196,197,5,65,0,0,197,198,5,78,0,0,198,199,5,84,0,0,199,46,1,
        0,0,0,200,201,5,100,0,0,201,202,5,101,0,0,202,203,5,102,0,0,203,
        204,5,105,0,0,204,205,5,110,0,0,205,206,5,101,0,0,206,48,1,0,0,0,
        207,208,5,97,0,0,208,209,5,110,0,0,209,210,5,100,0,0,210,50,1,0,
        0,0,211,212,5,101,0,0,212,213,5,113,0,0,213,52,1,0,0,0,214,215,5,
        108,0,0,215,216,5,116,0,0,216,54,1,0,0,0,217,218,5,108,0,0,218,219,
        5,101,0,0,219,56,1,0,0,0,220,221,5,110,0,0,221,222,5,101,0,0,222,
        58,1,0,0,0,223,224,5,103,0,0,224,225,5,116,0,0,225,60,1,0,0,0,226,
        227,5,103,0,0,227,228,5,101,0,0,228,62,1,0,0,0,229,230,5,108,0,0,
        230,231,5,101,0,0,231,232,5,110,0,0,232,64,1,0,0,0,233,234,5,110,
        0,0,234,235,5,111,0,0,235,236,5,116,0,0,236,66,1,0,0,0,237,238,5,
        111,0,0,238,239,5,114,0,0,239,68,1,0,0,0,240,241,5,105,0,0,241,242,
        5,110,0,0,242,243,5,100,0,0,243,244,5,101,0,0,244,245,5,120,0,0,
        245,70,1,0,0,0,246,247,5,115,0,0,247,248,5,108,0,0,248,249,5,105,
        0,0,249,250,5,99,0,0,250,251,5,101,0,0,251,72,1,0,0,0,252,253,5,
        112,0,0,253,254,5,114,0,0,254,255,5,105,0,0,255,256,5,110,0,0,256,
        257,5,116,0,0,257,258,5,102,0,0,258,74,1,0,0,0,259,260,5,112,0,0,
        260,261,5,114,0,0,261,262,5,105,0,0,262,263,5,110,0,0,263,264,5,
        116,0,0,264,76,1,0,0,0,265,266,5,114,0,0,266,267,5,97,0,0,267,268,
        5,110,0,0,268,269,5,100,0,0,269,270,5,111,0,0,270,271,5,109,0,0,
        271,272,5,95,0,0,272,273,5,115,0,0,273,274,5,116,0,0,274,275,5,114,
        0,0,275,276,5,105,0,0,276,277,5,110,0,0,277,278,5,103,0,0,278,78,
        1,0,0,0,279,280,5,67,0,0,280,281,5,111,0,0,281,282,5,109,0,0,282,
        283,5,109,0,0,283,284,5,101,0,0,284,285,5,110,0,0,285,286,5,116,
        0,0,286,80,1,0,0,0,287,288,5,60,0,0,288,289,5,97,0,0,289,290,5,32,
        0,0,290,291,5,104,0,0,291,292,5,114,0,0,292,293,5,101,0,0,293,294,
        5,102,0,0,294,295,5,61,0,0,295,296,5,34,0,0,296,297,5,35,0,0,297,
        298,5,34,0,0,298,299,5,62,0,0,299,82,1,0,0,0,300,301,5,60,0,0,301,
        302,5,97,0,0,302,303,5,32,0,0,303,304,5,104,0,0,304,305,5,114,0,
        0,305,306,5,101,0,0,306,307,5,102,0,0,307,308,5,61,0,0,308,309,5,
        34,0,0,309,84,1,0,0,0,310,311,5,34,0,0,311,312,5,62,0,0,312,313,
        5,97,0,0,313,314,5,98,0,0,314,315,5,99,0,0,315,316,5,60,0,0,316,
        317,5,47,0,0,317,318,5,97,0,0,318,319,5,62,0,0,319,86,1,0,0,0,320,
        321,5,60,0,0,321,322,5,115,0,0,322,323,5,99,0,0,323,324,5,114,0,
        0,324,325,5,105,0,0,325,326,5,112,0,0,326,327,5,116,0,0,327,328,
        5,62,0,0,328,88,1,0,0,0,329,330,5,60,0,0,330,331,5,47,0,0,331,332,
        5,115,0,0,332,333,5,99,0,0,333,334,5,114,0,0,334,335,5,105,0,0,335,
        336,5,112,0,0,336,337,5,116,0,0,337,338,5,62,0,0,338,90,1,0,0,0,
        339,340,5,60,0,0,340,341,5,115,0,0,341,342,5,116,0,0,342,343,5,121,
        0,0,343,344,5,108,0,0,344,345,5,101,0,0,345,346,5,62,0,0,346,92,
        1,0,0,0,347,348,5,60,0,0,348,349,5,47,0,0,349,350,5,115,0,0,350,
        351,5,116,0,0,351,352,5,121,0,0,352,353,5,108,0,0,353,354,5,101,
        0,0,354,355,5,62,0,0,355,94,1,0,0,0,356,357,5,60,0,0,357,358,5,98,
        0,0,358,359,5,114,0,0,359,360,5,62,0,0,360,96,1,0,0,0,361,362,5,
        60,0,0,362,363,5,47,0,0,363,364,5,98,0,0,364,365,5,114,0,0,365,366,
        5,62,0,0,366,98,1,0,0,0,367,368,5,60,0,0,368,369,5,105,0,0,369,370,
        5,109,0,0,370,371,5,103,0,0,371,372,5,32,0,0,372,373,5,115,0,0,373,
        374,5,114,0,0,374,375,5,99,0,0,375,376,5,61,0,0,376,377,5,120,0,
        0,377,378,5,120,0,0,378,379,5,58,0,0,379,100,1,0,0,0,380,381,5,60,
        0,0,381,382,5,47,0,0,382,383,5,97,0,0,383,384,5,62,0,0,384,102,1,
        0,0,0,385,386,5,62,0,0,386,104,1,0,0,0,387,391,5,34,0,0,388,390,
        7,0,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
        1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,34,0,0,395,106,
        1,0,0,0,396,397,7,1,0,0,397,401,6,53,0,0,398,400,7,2,0,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,108,
        1,0,0,0,403,401,1,0,0,0,404,405,7,3,0,0,405,409,6,54,1,0,406,408,
        7,4,0,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,
        1,0,0,0,410,110,1,0,0,0,411,409,1,0,0,0,412,414,7,5,0,0,413,412,
        1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,417,
        1,0,0,0,417,418,6,55,2,0,418,112,1,0,0,0,5,0,391,401,409,415,3,1,
        53,0,1,54,1,6,0,0
    ]

class count_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Text = 1
    Template = 2
    Block = 3
    With = 4
    CommentBegin = 5
    CommentEnd = 6
    If = 7
    Else = 8
    Range = 9
    Pipe = 10
    Comma = 11
    Assignment = 12
    Equal = 13
    Nil = 14
    LeftParenthesis = 15
    RightParenthesis = 16
    Dollar = 17
    Dot = 18
    End = 19
    BlockStart = 20
    Dash = 21
    BlockEnd = 22
    Constant = 23
    Define = 24
    And = 25
    Eq = 26
    Lt = 27
    Le = 28
    Ne = 29
    Gt = 30
    Ge = 31
    Len = 32
    Not = 33
    Or = 34
    Index = 35
    Slice = 36
    Printf = 37
    Myprint = 38
    Random = 39
    AnyText = 40
    AStart = 41
    HrefStart = 42
    HrefEnd = 43
    ScriptStart = 44
    ScriptEnd = 45
    StyleStart = 46
    StyleEnd = 47
    BrStart = 48
    BrEnd = 49
    ImgStart = 50
    AEnd = 51
    ImgEnd = 52
    StringConstant = 53
    NumberConstant = 54
    Name = 55
    WS = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'TEXT'", "'template'", "'block'", "'with'", "'/*'", "'*/'", 
            "'if'", "'else'", "'range'", "'|'", "','", "':='", "'='", "'nil'", 
            "'('", "')'", "'$'", "'.'", "'end'", "'{{'", "'-'", "'}}'", 
            "'CONSTANT'", "'define'", "'and'", "'eq'", "'lt'", "'le'", "'ne'", 
            "'gt'", "'ge'", "'len'", "'not'", "'or'", "'index'", "'slice'", 
            "'printf'", "'print'", "'random_string'", "'Comment'", "'<a href=\"#\">'", 
            "'<a href=\"'", "'\">abc</a>'", "'<script>'", "'</script>'", 
            "'<style>'", "'</style>'", "'<br>'", "'</br>'", "'<img src=xx:'", 
            "'</a>'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "Text", "Template", "Block", "With", "CommentBegin", "CommentEnd", 
            "If", "Else", "Range", "Pipe", "Comma", "Assignment", "Equal", 
            "Nil", "LeftParenthesis", "RightParenthesis", "Dollar", "Dot", 
            "End", "BlockStart", "Dash", "BlockEnd", "Constant", "Define", 
            "And", "Eq", "Lt", "Le", "Ne", "Gt", "Ge", "Len", "Not", "Or", 
            "Index", "Slice", "Printf", "Myprint", "Random", "AnyText", 
            "AStart", "HrefStart", "HrefEnd", "ScriptStart", "ScriptEnd", 
            "StyleStart", "StyleEnd", "BrStart", "BrEnd", "ImgStart", "AEnd", 
            "ImgEnd", "StringConstant", "NumberConstant", "Name", "WS" ]

    ruleNames = [ "Text", "Template", "Block", "With", "CommentBegin", "CommentEnd", 
                  "If", "Else", "Range", "Pipe", "Comma", "Assignment", 
                  "Equal", "Nil", "LeftParenthesis", "RightParenthesis", 
                  "Dollar", "Dot", "End", "BlockStart", "Dash", "BlockEnd", 
                  "Constant", "Define", "And", "Eq", "Lt", "Le", "Ne", "Gt", 
                  "Ge", "Len", "Not", "Or", "Index", "Slice", "Printf", 
                  "Myprint", "Random", "AnyText", "AStart", "HrefStart", 
                  "HrefEnd", "ScriptStart", "ScriptEnd", "StyleStart", "StyleEnd", 
                  "BrStart", "BrEnd", "ImgStart", "AEnd", "ImgEnd", "StringConstant", 
                  "NumberConstant", "Name", "WS" ]

    grammarFileName = "count_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[53] = self.NumberConstant_action 
            actions[54] = self.Name_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NumberConstant_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            1
     

    def Name_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            1
     


