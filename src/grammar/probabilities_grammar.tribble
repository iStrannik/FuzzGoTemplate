start = Template @@ 1.0;
Template = (Text @@ 0.6428571428571429 | GoAction @@ 0.35714285714285715) (Text @@ 0.6428571428571429 | GoAction @@ 0.35714285714285715)* ;
GoAction = CommentAction @@ 0.0 | PipelineAction @@ 0.6 | IfAction @@ 0.2 | RangeAction @@ 0.2 | TemplateAction @@ 0.0 | BlockAction @@ 0.0 | WithAction  @@ 0.0 ;
CommentAction = LD "/*" Text "*/" RD  @@ 1.0;
PipelineAction = LD ( Pipeline @@ 1.0 | VarDeclarePipeline @@ 0.0 | VarAssignPipeline  @@ 0.0) RD  ;
IfAction = LD " if " Pipeline RD Template ( LD " else " (" if " Pipeline)? RD Template )? End  @@ 1.0;
RangeAction = LD " range " ( Pipeline @@ 1.0 | VarDeclarePipeline  @@ 0.0) RD Template ( LD " else " RD Template)? End  ;
TemplateAction = LD " template " Name (Pipeline)? RD  @@ 1.0;
BlockAction = LD " block " Name (Pipeline)? RD  @@ 1.0;
WithAction = LD " with " Pipeline RD Template ( LD " else " RD Template)? End  @@ 1.0;
Pipeline = Argument ( "|" Argument )* @@ 1.0 | MethodCall @@ 0.0 | FuncCall ( Argument )*  @@ 0.0 ;
VarDeclarePipeline =  Variable (" , " Variable)? " := " Pipeline  @@ 1.0;
VarAssignPipeline =  Variable " = " Pipeline  @@ 1.0;
Argument = Constant @@ 0.0 | " nil " @@ 0.0 | Variable @@ 0.0 | Fields @@ 1.0 | FuncCall @@ 0.0 | ("(" Argument " ) " Fields? )  @@ 0.0 ;
Variable = " $ " (Name)?  @@ 1.0;
Fields = (Variable)? " . " Name ( " . " Name)?  @@ 1.0;
FuncCall = Name  @@ 1.0;
MethodCall = ( Variable @@ 0.0 | Fields  @@ 1.0) ( Argument )*  ;
End = LD " end " RD  @@ 1.0;
LD = " {{ " (" - ")?  @@ 1.0;
RD = (" - ")? " }} "  @@ 1.0;
Name = Letter ( Letter @@ 1.0 | Digit  @@ 0.0)*  ;
Text = "TEXT"  @@ 1.0;
Constant = "CONSTANT" @@ 1.0;
Letter = /[a-zA-Z]/ @@ 1.0;
Digit = /[0-9]/ @@ 1.0;
